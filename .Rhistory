# Vectors:
# - Players
# - Seasons
#We will go understand these inside the course.
#
#Sincerely,
#Kirill Eremenko
#www.superdatascience.com
#Copyright: These datasets were prepared using publicly available data.
#           However, theses scripts are subject to Copyright Laws.
#           If you wish to use these R scripts outside of the R Programming Course
#           by Kirill Eremenko, you may do so by referencing www.superdatascience.com in your work.
#Comments:
#Seasons are labeled based on the first year in the season
#E.g. the 2012-2013 season is preseneted as simply 2012
#Notes and Corrections to the data:
#Kevin Durant: 2006 - College Data Used
#Kevin Durant: 2005 - Proxied With 2006 Data
#Derrick Rose: 2012 - Did Not Play
#Derrick Rose: 2007 - College Data Used
#Derrick Rose: 2006 - Proxied With 2007 Data
#Derrick Rose: 2005 - Proxied With 2007 Data
#Seasons
Seasons <- c("2005","2006","2007","2008","2009","2010","2011","2012","2013","2014")
#Players
Players <- c("KobeBryant","JoeJohnson","LeBronJames","CarmeloAnthony","DwightHoward","ChrisBosh","ChrisPaul","KevinDurant","DerrickRose","DwayneWade")
#Salaries
KobeBryant_Salary <- c(15946875,17718750,19490625,21262500,23034375,24806250,25244493,27849149,30453805,23500000)
JoeJohnson_Salary <- c(12000000,12744189,13488377,14232567,14976754,16324500,18038573,19752645,21466718,23180790)
LeBronJames_Salary <- c(4621800,5828090,13041250,14410581,15779912,14500000,16022500,17545000,19067500,20644400)
CarmeloAnthony_Salary <- c(3713640,4694041,13041250,14410581,15779912,17149243,18518574,19450000,22407474,22458000)
DwightHoward_Salary <- c(4493160,4806720,6061274,13758000,15202590,16647180,18091770,19536360,20513178,21436271)
ChrisBosh_Salary <- c(3348000,4235220,12455000,14410581,15779912,14500000,16022500,17545000,19067500,20644400)
ChrisPaul_Salary <- c(3144240,3380160,3615960,4574189,13520500,14940153,16359805,17779458,18668431,20068563)
KevinDurant_Salary <- c(0,0,4171200,4484040,4796880,6053663,15506632,16669630,17832627,18995624)
DerrickRose_Salary <- c(0,0,0,4822800,5184480,5546160,6993708,16402500,17632688,18862875)
DwayneWade_Salary <- c(3031920,3841443,13041250,14410581,15779912,14200000,15691000,17182000,18673000,15000000)
#Matrix
Salary <- rbind(KobeBryant_Salary, JoeJohnson_Salary, LeBronJames_Salary, CarmeloAnthony_Salary, DwightHoward_Salary, ChrisBosh_Salary, ChrisPaul_Salary, KevinDurant_Salary, DerrickRose_Salary, DwayneWade_Salary)
rm(KobeBryant_Salary, JoeJohnson_Salary, CarmeloAnthony_Salary, DwightHoward_Salary, ChrisBosh_Salary, LeBronJames_Salary, ChrisPaul_Salary, DerrickRose_Salary, DwayneWade_Salary, KevinDurant_Salary)
colnames(Salary) <- Seasons
rownames(Salary) <- Players
#Games
KobeBryant_G <- c(80,77,82,82,73,82,58,78,6,35)
JoeJohnson_G <- c(82,57,82,79,76,72,60,72,79,80)
LeBronJames_G <- c(79,78,75,81,76,79,62,76,77,69)
CarmeloAnthony_G <- c(80,65,77,66,69,77,55,67,77,40)
DwightHoward_G <- c(82,82,82,79,82,78,54,76,71,41)
ChrisBosh_G <- c(70,69,67,77,70,77,57,74,79,44)
ChrisPaul_G <- c(78,64,80,78,45,80,60,70,62,82)
KevinDurant_G <- c(35,35,80,74,82,78,66,81,81,27)
DerrickRose_G <- c(40,40,40,81,78,81,39,0,10,51)
DwayneWade_G <- c(75,51,51,79,77,76,49,69,54,62)
#Matrix
Games <- rbind(KobeBryant_G, JoeJohnson_G, LeBronJames_G, CarmeloAnthony_G, DwightHoward_G, ChrisBosh_G, ChrisPaul_G, KevinDurant_G, DerrickRose_G, DwayneWade_G)
rm(KobeBryant_G, JoeJohnson_G, CarmeloAnthony_G, DwightHoward_G, ChrisBosh_G, LeBronJames_G, ChrisPaul_G, DerrickRose_G, DwayneWade_G, KevinDurant_G)
colnames(Games) <- Seasons
rownames(Games) <- Players
#Minutes Played
KobeBryant_MP <- c(3277,3140,3192,2960,2835,2779,2232,3013,177,1207)
JoeJohnson_MP <- c(3340,2359,3343,3124,2886,2554,2127,2642,2575,2791)
LeBronJames_MP <- c(3361,3190,3027,3054,2966,3063,2326,2877,2902,2493)
CarmeloAnthony_MP <- c(2941,2486,2806,2277,2634,2751,1876,2482,2982,1428)
DwightHoward_MP <- c(3021,3023,3088,2821,2843,2935,2070,2722,2396,1223)
ChrisBosh_MP <- c(2751,2658,2425,2928,2526,2795,2007,2454,2531,1556)
ChrisPaul_MP <- c(2808,2353,3006,3002,1712,2880,2181,2335,2171,2857)
KevinDurant_MP <- c(1255,1255,2768,2885,3239,3038,2546,3119,3122,913)
DerrickRose_MP <- c(1168,1168,1168,3000,2871,3026,1375,0,311,1530)
DwayneWade_MP <- c(2892,1931,1954,3048,2792,2823,1625,2391,1775,1971)
#Matrix
MinutesPlayed <- rbind(KobeBryant_MP, JoeJohnson_MP, LeBronJames_MP, CarmeloAnthony_MP, DwightHoward_MP, ChrisBosh_MP, ChrisPaul_MP, KevinDurant_MP, DerrickRose_MP, DwayneWade_MP)
rm(KobeBryant_MP, JoeJohnson_MP, CarmeloAnthony_MP, DwightHoward_MP, ChrisBosh_MP, LeBronJames_MP, ChrisPaul_MP, DerrickRose_MP, DwayneWade_MP, KevinDurant_MP)
colnames(MinutesPlayed) <- Seasons
rownames(MinutesPlayed) <- Players
#Field Goals
KobeBryant_FG <- c(978,813,775,800,716,740,574,738,31,266)
JoeJohnson_FG <- c(632,536,647,620,635,514,423,445,462,446)
LeBronJames_FG <- c(875,772,794,789,768,758,621,765,767,624)
CarmeloAnthony_FG <- c(756,691,728,535,688,684,441,669,743,358)
DwightHoward_FG <- c(468,526,583,560,510,619,416,470,473,251)
ChrisBosh_FG <- c(549,543,507,615,600,524,393,485,492,343)
ChrisPaul_FG <- c(407,381,630,631,314,430,425,412,406,568)
KevinDurant_FG <- c(306,306,587,661,794,711,643,731,849,238)
DerrickRose_FG <- c(208,208,208,574,672,711,302,0,58,338)
DwayneWade_FG <- c(699,472,439,854,719,692,416,569,415,509)
#Matrix
FieldGoals <- rbind(KobeBryant_FG, JoeJohnson_FG, LeBronJames_FG, CarmeloAnthony_FG, DwightHoward_FG, ChrisBosh_FG, ChrisPaul_FG, KevinDurant_FG, DerrickRose_FG, DwayneWade_FG)
rm(KobeBryant_FG, JoeJohnson_FG, LeBronJames_FG, CarmeloAnthony_FG, DwightHoward_FG, ChrisBosh_FG, ChrisPaul_FG, KevinDurant_FG, DerrickRose_FG, DwayneWade_FG)
colnames(FieldGoals) <- Seasons
rownames(FieldGoals) <- Players
#Field Goal Attempts
KobeBryant_FGA <- c(2173,1757,1690,1712,1569,1639,1336,1595,73,713)
JoeJohnson_FGA <- c(1395,1139,1497,1420,1386,1161,931,1052,1018,1025)
LeBronJames_FGA <- c(1823,1621,1642,1613,1528,1485,1169,1354,1353,1279)
CarmeloAnthony_FGA <- c(1572,1453,1481,1207,1502,1503,1025,1489,1643,806)
DwightHoward_FGA <- c(881,873,974,979,834,1044,726,813,800,423)
ChrisBosh_FGA <- c(1087,1094,1027,1263,1158,1056,807,907,953,745)
ChrisPaul_FGA <- c(947,871,1291,1255,637,928,890,856,870,1170)
KevinDurant_FGA <- c(647,647,1366,1390,1668,1538,1297,1433,1688,467)
DerrickRose_FGA <- c(436,436,436,1208,1373,1597,695,0,164,835)
DwayneWade_FGA <- c(1413,962,937,1739,1511,1384,837,1093,761,1084)
#Matrix
FieldGoalAttempts <- rbind(KobeBryant_FGA, JoeJohnson_FGA, LeBronJames_FGA, CarmeloAnthony_FGA, DwightHoward_FGA, ChrisBosh_FGA, ChrisPaul_FGA, KevinDurant_FGA, DerrickRose_FGA, DwayneWade_FGA)
rm(KobeBryant_FGA, JoeJohnson_FGA, LeBronJames_FGA, CarmeloAnthony_FGA, DwightHoward_FGA, ChrisBosh_FGA, ChrisPaul_FGA, KevinDurant_FGA, DerrickRose_FGA, DwayneWade_FGA)
colnames(FieldGoalAttempts) <- Seasons
rownames(FieldGoalAttempts) <- Players
#Points
KobeBryant_PTS <- c(2832,2430,2323,2201,1970,2078,1616,2133,83,782)
JoeJohnson_PTS <- c(1653,1426,1779,1688,1619,1312,1129,1170,1245,1154)
LeBronJames_PTS <- c(2478,2132,2250,2304,2258,2111,1683,2036,2089,1743)
CarmeloAnthony_PTS <- c(2122,1881,1978,1504,1943,1970,1245,1920,2112,966)
DwightHoward_PTS <- c(1292,1443,1695,1624,1503,1784,1113,1296,1297,646)
ChrisBosh_PTS <- c(1572,1561,1496,1746,1678,1438,1025,1232,1281,928)
ChrisPaul_PTS <- c(1258,1104,1684,1781,841,1268,1189,1186,1185,1564)
KevinDurant_PTS <- c(903,903,1624,1871,2472,2161,1850,2280,2593,686)
DerrickRose_PTS <- c(597,597,597,1361,1619,2026,852,0,159,904)
DwayneWade_PTS <- c(2040,1397,1254,2386,2045,1941,1082,1463,1028,1331)
#Matrix
Points <- rbind(KobeBryant_PTS, JoeJohnson_PTS, LeBronJames_PTS, CarmeloAnthony_PTS, DwightHoward_PTS, ChrisBosh_PTS, ChrisPaul_PTS, KevinDurant_PTS, DerrickRose_PTS, DwayneWade_PTS)
rm(KobeBryant_PTS, JoeJohnson_PTS, LeBronJames_PTS, CarmeloAnthony_PTS, DwightHoward_PTS, ChrisBosh_PTS, ChrisPaul_PTS, KevinDurant_PTS, DerrickRose_PTS, DwayneWade_PTS)
colnames(Points) <- Seasons
rownames(Points) <- Players
Game
Games
rownames(Games)
colnames(Games)
Games[3,8]
Games[3,"2012"]
FieldGoals
FieldGoals / Games
round(FieldGoals / Games,1)
MinutesPlayed / Games
round(MinutesPlayed / Games)
MinutesPlayed
Points
Points / Games
round(Points/Game)
round(Points / Games)
?matplot()
FieldGoals
t(FieldGoals)
matplot(FieldGoals)
matplot(FieldGoals), type="b", pch="15:18", col=c(1:4,6))
matplot(FieldGoals), type="b", pch=15:18, col=c(1:4,6))
t(FieldGoals)
matplot(FieldGoals), type="b", pch=15:18, col=c(1:4,6))
matplot(FieldGoals) type="b", pch=15:18, col=c(1:4,6))
matplot(FieldGoals), type="b", pch=15:18, col=c(1:4,6))
matplot(t(FieldGoals), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, lengend=Players)
legend("bottomleft", inset=0.01, lengend=Players, col=c(1:4,6), pch = 15:18, horiz = F)
legend("bottomleft", inset=0.01, lengend=Players, col=c(1:4,6), pch = 15:18, horiz = F)
matplot(t(FieldGoals), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, lengend=Players, col=c(1:4,6), pch = 15:18, horiz = F)
legend("bottomleft", inset=0.01, lengend=Players, col=c(1:4,6), pch=15:18, horiz=F)
legend("bottomleft", inset=0.01, legend=Players, col=c(1:4,6), pch=15:18, horiz=F)
matplot(t(FieldGoals/Games), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players, col=c(1:4,6), pch=15:18, horiz=F)
#measuring accuracy
matplot(t(FieldGoals/FieldGoalAttempts), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players, col=c(1:4,6), pch=15:18, horiz=F)
x <- c("a","b","c","d","e")
x
x[1,5]
x[c(1,5)]
x[1]
Games
Games[1:3,6:10]
Games[c(1,10),]
Games[1:10,4:5]
Games[,c("2008","2009")]
Games[1,"2005":"2014"]
Games[1,1:10]
Games[1,]
is.vector(Games[1,])
Games[1,5]
Games[$1,5]
Games[1,,5]
Games[1,,drop(=F)]
Games[1,,drop=F]
Games[1,5,,drop=F]
Games[1,5,drop=F]
matplot(t(MinutesPlayed), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players, col=c(1:4,6), pch=15:18, horiz=F)
data <- MinutesPlayed[1:3,]
matplot(t(data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players, col=c(1:4,6), pch=15:18, horiz=F)
data
legend("bottomleft", inset=0.01, legend=Players[1:3], col=c(1:4,6), pch=15:18, horiz=F)
data <- MinutesPlayed[1:3,]
matplot(t(data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players[1:3], col=c(1:4,6), pch=15:18, horiz=F)
data <- MinutesPlayed[1,]
matplot(t(data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players[1], col=c(1:4,6), pch=15:18, horiz=F)
data #our new data and new chart
data <- MinutesPlayed[1,,drop=F]
matplot(t(data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players[1], col=c(1:4,6), pch=15:18, horiz=F)
legend("bottomleft", inset=0.01, legend=Players[1], col=c(1:4,6), pch=15:18, horiz=F)
data <- MinutesPlayed[1,,drop=F]
matplot(t(data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players[1], col=c(1:4,6), pch=15:18, horiz=F)
MyPlot <- function(){
data <- MinutesPlayed[1,,drop=F]
matplot(t(data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players[1], col=c(1:4,6), pch=15:18, horiz=F)
}
MyPlot <- function(){
data <- MinutesPlayed[1,,drop=F]
matplot(t(data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players[1], col=c(1:4,6), pch=15:18, horiz=F)
}
MyPlot <- function(){
data <- MinutesPlayed[2,,drop=F]
matplot(t(data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players[2], col=c(1:4,6), pch=15:18, horiz=F)
}
View(MyPlot)
View(MyPlot)
MyPlot
MyPlot
MyPlot
MyPlot <- function(){
data <- MinutesPlayed[2:3,,drop=F]
matplot(t(data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players[2:3], col=c(1:4,6), pch=15:18, horiz=F)
}
MyPlot
MyPlot
data <- MinutesPlayed[2:3,,drop=F]
matplot(t(data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players[2:3], col=c(1:4,6), pch=15:18, horiz=F)
myplot <- function(){
data <- MinutesPlayed[2:3,,drop=F]
matplot(t(data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players[2:3], col=c(1:4,6), pch=15:18, horiz=F)
}
myplot()
myplot
myplot()
myplot <- function(rows){
data <- MinutesPlayed[rows,,drop=F]
matplot(t(data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players[rows], col=c(1:4,6), pch=15:18, horiz=F)
}
myplot(1:5)
#now i type the rows i want over here, say top 5 players
myplot(1:10)
#now i type the rows i want over here, say top 5 players
myplot(1:10)
#now i type the rows i want over here, say top 5 players
myplot(1:10)
myplot <- function(rows){
data <- MinutesPlayed[rows,,drop=F]
matplot(t(data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players[rows], col=c(1:4,6), pch=15:18, horiz=F)
}
#now i type the rows i want over here, say top 5 players
myplot(1:10)
myplot <- function(Data,rows){
data <- Data[rows,,drop=F]
matplot(t(data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players[rows], col=c(1:4,6), pch=15:18, horiz=F)
}
data <- Data[rows,,drop=F]
matplot(t(data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players[rows], col=c(1:4,6), pch=15:18, horiz=F)
myplot <- function(Data,rows){
data <- Data[rows,,drop=F]
matplot(t(data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players[rows], col=c(1:4,6), pch=15:18, horiz=F)
}
myplot(salary, 1:10)
myplot(Salary, 1:10)
myplot(Salary,1:2)
myplot <- function(Data,rows=1:10){
data <- Data[rows,,drop=F]
matplot(t(data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players[rows], col=c(1:4,6), pch=15:18, horiz=F)
}
myplot(Salary)
View(myplot)
function(Data,rows=1:10){
data <- Data[rows,,drop=F]
matplot(t(data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players[rows], col=c(1:4,6), pch=15:18, horiz=F)
}
myplot(games)
myplot(Games)
#1. salary
myplot(Salary)
myplot(Salary/Games)
myplot(Salary/FieldGoals)
#1. salary
myplot(Salary)
myplot(Salary/Games) #what are they payed per game
#2. in-game minutues : thus we use ingame mins played to judge them
myplot(MinutesPlayed)
myplot(Points)
#3. Normalised in-game metrics
myplot(FieldGoals/Games)
myplot(FieldGoals/FieldGoalAttempts)
myplot(FieldGoalAttempts/Games)
#4. observation of mins played going down
myplot(MinutesPlayed/Games)
#all players now play less mins in the game nw
myplot(Games)
#5. Time observation
myplot(FieldGoals/MinutesPlayed)
#6. Player Style
myplot(Points/FieldGoals)
getwd()
setwd("C:\\Users\\Akshata Kumar\\Desktop\\Statistics and R")
getwd()
demography <- read.csv("3. demographics.csv", stringsAsFactors = TRUE)
#Creating simply count
mytable <- table(demography$educ, exclude = NULL) #to ignore missing values
mytable
print(mytable)
print(mytable)
#Creating cum count
cumulative <- cumsum(mytable)
cumulative
#Computing relative freq
relative <- prop.table(mytable)
relative
#Computing cum rel freq
n <- nrow(demography)
cumrelfreq <- cumulative/n
cumrelfreq
#Making one big table
finaltable <- cbind(Freq=mytable, Cumul=cumulative,Relative = relative, CumFreq = cumrelfreq)
finaltable
View(demography)
#Cross table to be built has variables gender and carcat
?xtabs
install.packages("xtabs")
ct <- xtabs(~gender+carcat, data=demography)
ftable(ct)
#3.4 bUILDING CROSS TABLES USING CROSSTABLE IN GMODELS PACKAGE
install.packages("gmodels")
library(gmodels)
detach("package:gmodels", unload = TRUE)
CrossTable(demo$gender, demo$carcat, prop.chisq = FALSE)
CrossTable(demo$gender, demo$carcaT)
CrossTable(demo$gender, demo$carcat)
CrossTable(demography$gender, demography$carcat, prop.chisq= FALSE)
CrossTable(demography$gender, demography$carcat)
CrossTable(demography$gender, demography$carcat)
library(gmodels)
CrossTable(demography$gender, demography$carcat)
View(CrossTable)
new <- CrossTable(demography$gender, demography$carcat)
View(new)
CrossTable(demography$gender, demography$carcat)
rm(new)
CrossTable(demo$gender, demo$carcat, digits=3, expected=TRUE, prop.r=TRUE, prop.c=TRUE,
prop.t=TRUE, prop.chisq=TRUE, chisq = FALSE, fisher=FALSE, mcnemar=FALSE,
missing.include=FALSE)
CrossTable(demography$gender, demography$carcat, digits=3, expected=TRUE, prop.r=TRUE, prop.c=TRUE,
prop.t=TRUE, prop.chisq=TRUE, chisq = FALSE, fisher=FALSE, mcnemar=FALSE,
missing.include=FALSE)
#BUILDING CHARTS
#4.1 HISTOGRAMS
#using file demography
getwd()
read.csv("3. demographics.csv", stringsAsFactors = TRUE)
#BUILDING CHARTS
#4.1 HISTOGRAMS
#using file demography
getwd()
read.csv("3. demographics.csv", stringsAsFactors = TRUE)
demography <- read.csv("3. demographics.csv", stringsAsFactors = TRUE)
View(demography)
#making histogram of income
install.packages("ggplot2")
library(ggplot2)
ggplot() + geom_histogram(data = demography, aes(x=income))
#bettering it
ggplot() +
geom_histogram(data = demography,  aes(x=income), fill="pink", colour= "black")
#bettering it
ggplot() +
geom_histogram(data = demography,  aes(x=income), fill="yellow", colour= "black")
#adding y axis as density
ggplot() +
geom_histogram(data = demography,  aes(x=income, y=..density..), fill="yellow", colour= "black")
+ facet_grid(gender~marital)
#now if u want to show income density but gender wise and also marital status wise
ggplot() +
geom_histogram(data = demography,  aes(x=income), fill="yellow", colour= "black") + facet_grid(gender~marital)
#now if u want to show income density but gender wise and also marital status wise
ggplot() +
geom_histogram(data = demography, binwidth = 10,  aes(x=income), fill="yellow", colour= "black") + facet_grid(gender~marital)
#now if u want to show income density but gender wise and also marital status wise
ggplot() +
geom_histogram(data = demography, binwidth = 20,  aes(x=income), fill="yellow", colour= "black") + facet_grid(gender~marital)
#now if u want to show income density but gender wise and also marital status wise
ggplot() +
geom_histogram(data = demography, binwidth = 20,  aes(x=income, y=..Density..), fill="yellow", colour= "black") + facet_grid(gender~marital)
#now if u want to show income density but gender wise and also marital status wise
ggplot() +
geom_histogram(data = demography, binwidth = 20,  aes(x=income, y=..density..), fill="yellow", colour= "black") + facet_grid(gender~marital)
#now if u want to show income density but gender wise and also marital status wise
ggplot() +
geom_histogram(data = demography, binwidth = 20,  aes(x=income, y=..density..), fill="blue", colour= "black") + facet_grid(gender~marital)
# suppose i want the orignal graph of income and density but in the same histogram i wanna see male and female
ggplot() +
geom_histogram(data = demography,  aes(x=income, y=..density..,fill=gender) , colour= "black")
# suppose i want the orignal graph of income and density but in the same histogram i wanna see male and female
ggplot() +
geom_histogram(data = demography, binwidth = 10, aes(x=income, y=..density..,fill=gender) , colour= "black")
# suppose i want the orignal graph of income and density but in the same histogram i wanna see male and female
ggplot() +
geom_histogram(data = demography, binwidth = 40, aes(x=income, y=..density..,fill=gender) , colour= "black")
# suppose i want the orignal graph of income and density but in the same histogram i wanna see male and female
ggplot() +
geom_histogram(data = demography, binwidth = 10, aes(x=income, y=..density..,fill=gender) , colour= "black")
install.packages("plyr")
library(plyr)
mydata <- count(demography, 'income')
View(mydata)
#we have income and freq, now finding cum counts and cum %
cumul <- cumsum(mydata$freq)
cumper <- cumul/nrow(demography)
mydata <- cbind(mydata, cumper)
View(mydata)
#now we plot these
ggplot() +
geom_line(data = mydata, aes(x=income, y=cumper))
ggplot() +
geom_step(data = mydata, aes(x=income, y=cumper))
colnames(demography)
summary(demography)
head(demography)
female <- demography[demography$gender == "Female", ]
male <- demography[demography$gender == "Male", ]
View(male)
mydata_male <- count(male, "income")
cumulm <- cumsum(mydata_male$freq)
cumpercm <- cumulm/nrow(male)
mydata_male <- cbind(mydata_male, cumpercm)
View(mydata_male)
mydata_female <- count(female, "income")
cumulf <- cumsum(mydata_female$freq)
cumpercf <- cumulf/nrow(female)
mydata_female <- cbind(mydata_female, cumpercf)
View(mydata_female)
#drawing the final freq line using ggplot2
ggplot()+geom_line(data=mydata_male, aes(x=income, y=cumpercm), color="red")+
geom_line(data=mydata_female, aes(x=income, y=cumpercf), color="blue")
#Adding legends: this happnes by creating a new variable first and then using the function scale_color_manual
lgd <- scale_color_manual("Legend", values=c(Male="red", Female="blue"))
ggplot()+
geom_line(data=mydata_male, aes(x=income, y=cumpercm, color="Male"), size=1.3)+
geom_line(data=mydata_female, aes(x=income, y=cumpercf, color="Female"), size=1.3)+
lgd
12750 + 1500+4875
12750+1500+4875
19125-25500
getwd()
#Using Shapiro Wilk test to determine normality of data
demography <- read.csv("3. demographics.csc", stringsAsFactors = TRUE)
#Using Shapiro Wilk test to determine normality of data
demography <- read.csv("3. demographics.csv", stringsAsFactors = TRUE)
View(demography)
colnames(demography)
head(demography)
#Checking for normality for the variable "income" in the demography csv file
shapiro.test(demography&income)
#Checking for normality for the variable "income" in the demography csv file
shapiro.test(demography$income)
tail(demography)
summary(demography)
#Checking for normality for the variable "income" in the demography csv file
shapiro.test(demography$income)
library(ggplot2)
#We start by calculating the mean and standard deviation of the variable, which will help draw the normal distibution curve
mean <- mean(demography$income)
std <- sd(demography$income)
#Now we build the histogram using ggplot2 and also add the normal distibution curve to the diagram
ggplot() + geom_histogram(data=demography, aes(x=income, y=..density..), fill="yellow")
+ stat_function(fun=dnorm, args= list(mean = mean, sd = std), aes(x=demography$income))
+ stat_function(fun=dnorm, args= list(mean = mean, sd = std), aes(x=demography$income))
ggplot() + geom_histogram(data=demography, aes(x=income, y=..density..), fill="yellow") + stat_function(fun=dnorm, args= list(mean = mean, sd = std), aes(x=demography$income))
#5.3 Working with outliers - using standardized values
#We will first convert all values to standardized values using the function "Scale"
zinco <- scale(demography$income, scale = TRUE)
sort(zinco, decreasing = TRUE)#sorting
#using the ttest
t.test(demography$income, alternative = "two.sided", mu=70)
#Creating a count function for no of males and females
mytable = table(demography$gender)
print(mytable)
#Running binomial test using function
binom.test(mytable, p=0.50, alternative = "two.sided", conf.level = 0.95)
#Another test for, males proportion being 60%
binom.test(mytable, p=0.40, alternative = "two.sided", conf.level = 0.95)
mtable = table(demography$educ)
n <- length(mtable)
print(n)
thprop <- 1/n
print(thprop)
chisq.test(mtable, p=rep(thprop,n))
chisq.test(mtable, p=rep(thprop, n))$expected
chisq.test(mtable, p=rep(thprop, n))$residuals
chisq.test(mtable, p=rep(thprop, n))$stdres
### run the chi square test
### with UNequal theoretical probabilities
chisq.test(mtable, p=c(0.30,0.30,0.20,0.10,0.10))
chisq.test(mtable, p=c(0.30,0.30,0.20,0.10,0.10))$expected
